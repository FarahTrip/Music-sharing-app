@using Microsoft.AspNet.Identity;
@using Microsoft.AspNet.Identity.EntityFramework;

@{

    var CurrentDateTime = DateTime.Now;
    var Stiluri = Model.PieseAllViewModel.Stiluri;
    var UserId = User.Identity.GetUserId();
}
<head>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="~/Content/piese.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha384-d7B6txDp8PZj+KryoMmUz5l/6en8XCp+HHAAK5GSLf2xlYtvJ8U2Q4U+9cuEnJoa3" crossorigin="anonymous">
    <link href="~/Content/Side-bar.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<link href="~/Content/IsolatedStyles.css" rel="stylesheet" />

<style>



    .card {
        margin-right: 20px;
    }

    #yourUserID {
        color: #FF4E79;
    }


    .body-content {
        padding: 0px !important;
        margin: 0px !important;
    }

    footer {
        display: none !important;
    }

    td:nth-child(n) {
        max-width: 10vw !important;
    }

    .music-player {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #333;
        padding: 10px;
        box-sizing: border-box;
        z-index: 1000;
    }



    .player-controls {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        position: relative;
        margin-bottom: 1rem;
    }

    .control-button {
        background: none;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 0;
        margin: 0 5px;
    }

    .slider {
        -webkit-appearance: none;
        width: 70%;
        height: 8px;
        background: #9933cc;
        outline: none;
        border-radius: 8px;
        overflow: hidden;
        position: relative;
        box-shadow: 0 0 10px 3px rgba(255, 0, 255, 0.5); /* Outer glow */
        animation: pulse 2s infinite;
    }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 25px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
        }

    .control-button img {
        width: 32px;
        height: 32px;
    }

    .volume-container {
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%); /* Vertically center the volume control */
        display: inline-flex;
        align-items: center;
        cursor: pointer;
    }

    .sound-icon {
        width: 32px;
        height: 32px;
    }

    .slider.volume-slider {
        margin-bottom: 0.3rem;
        margin-left: 0.5rem;
        -webkit-appearance: none;
        height: 8px;
        background: #555;
        outline: none;
        border-radius: 8px;
        overflow: hidden;
        cursor: pointer;
    }

        .slider.volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
        }

    .player-info {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 5px;
    }

    .song-title {
        color: white;
        font-size: 14px;
    }

    .time-info {
        color: white;
        font-size: 12px;
    }


    .player-info {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 5px;
    }

    .song-title {
        color: white;
        font-size: 14px;
    }

    .time-info {
        color: white;
        font-size: 12px;
    }

    .artist-name {
        color: white;
        font-size: 14px;
    }

    .player-info {
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 5px;
    }

    .song-info {
        text-align: center;
    }

    .song-title {
        color: white;
        font-size: 18px;
    }

    .artist-name {
        color: white;
        font-size: 14px;
        margin-top: 3px;
    }

    .time-info {
        color: white;
        font-size: 12px;
        margin-top: 5px;
    }

    .music-player {
        background-image: linear-gradient(135deg, #191d23 0%, #344051 50%, #191d23 100%);
    }

    #autoplay-indicator,
    #loop-icon {
        display: flex;
        align-items: center;
        font-size: 14px;
        font-weight: 700;
        padding: 0 8px;
        border-right: 1px solid #444;
        border-left: 1px solid #444;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }

    #phonemenu-indicator {
        display: none;
        align-items: center;
        font-size: 14px;
        font-weight: 700;
        padding: 0 8px;
        border-right: 1px;
        border-left: 1px;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        left: 2px;
    }

    #autoplay-indicator {
        left: 1rem;
    }

    #loop-icon {
        left: 10rem;
    }


    #autoplay-indicator span {
        margin-left: 4px;
        cursor: pointer;
    }

        #autoplay-indicator span.on {
            color: green;
        }

        #autoplay-indicator span.off {
            color: red;
        }

    #playBTN,
    #pauseBTN {
        height: 55px;
        width: 55px;
    }

    #loop-img {
        height: 2rem;
        width: 2rem;
        cursor: pointer;
    }

    #progress::-webkit-slider-runnable-track {
        background: linear-gradient( to right, magenta var(--webkit-fill-percent), #333 var(--webkit-fill-percent) );
        background-size: 100% 100%;
        background-repeat: no-repeat;
        border: none;
    }

    #treedots {
        height: 2.2rem;
        width: 2.2rem;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .options {
        display: flex;
        justify-content: space-around;
        align-items: center;
        font-size: 1.2rem;
        color: #fff;
    }

    .loop-option,
    .autoplay-option {
        display: flex;
        align-items: center;
    }

        .loop-option label,
        .autoplay-option label {
            margin-right: 10px;
        }

    .play-icon, .pause-icon {
        width: 30px;
        height: 30px;
        margin-right: 5px;
        vertical-align: middle;
    }

    #LikeCount {
        display: none;
    }

    .playlist-modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.8);
    }

    .playlist-container {
        display: flex;
        flex-direction: column;
        /*        align-items: center;*/
        position: relative;
        padding: 10px;
        border-radius: 5px;
        background-color: #2c3440;
        cursor: pointer;
        margin-bottom: 10px;
        transition: background-color 0.3s;
    }


        .playlist-container .plus-button {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
        }

        .playlist-container .songs {
            display: none;
            margin-top: 10px;
        }

            .playlist-container .songs .song {
                margin: 5px 0;
            }


    .playlist-container {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    .playlist-name-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
    }

    .playlist-name {
        font-size: 1.5em;
    }

    .playlist-close {
        color: #ccc;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .playlist-modal-content {
        background-color: #1d2330;
        margin: 0;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        width: 80%;
        min-height: 70%;
        position: absolute;
        top: 45%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        flex-direction: column;
        gap: 10px;
        animation: popup 0.3s;
    }

    .plus-button {
        font-size: 1.5em;
        position: absolute;
        top: 10px;
        right: 20px;
        cursor: pointer;
    }

    .songs-container .song {
        padding: 5px;
        font-size: 1.1em;
        background-color: #3a4250;
        border-radius: 40px;
        margin: 5px 0;
        transition: background-color 0.3s;
        text-align: center;
    }

    .songs-container {
        max-height: 200px;
        overflow-y: auto;
        width: 100%;
        display: none;
    }

        .songs-container .song:hover {
            background-color: #48516a;
        }

        .songs-container::-webkit-scrollbar {
            width: 6px;
        }

        .songs-container::-webkit-scrollbar-thumb {
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

    .additional-features {
        margin-top: 10px;
    }

    .feature-placeholder {
        font-size: 1.1em;
        padding: 5px;
        background-color: #2c3440;
        border-radius: 5px;
        margin-bottom: 5px;
    }

    #leftMenu {
        width: 10%;
        height: 100%;
        background-color: #0d1117;
    }

    #leftMenu {
        flex-direction: column;
        gap: 10px;
        padding: 20px;
    }

    .left-menu-button {
        background-color: transparent;
        border: none;
        color: #fff;
        cursor: pointer;
        font-size: 1.2em;
        padding: 10px 15px;
        text-align: left;
        position: relative;
    }

        .left-menu-button:hover {
            color: #ff8b8b;
        }

        .left-menu-button::before {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #ff00a1, #ffc800);
            border-radius: 5px;
            clip-path: polygon(0 0, 100% 0, calc(100% - 10px) 100%, 0 100%);
            transition: all 0.3s ease;
            z-index: -1;
        }

        .left-menu-button:hover::before {
            clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        }


    #leftMenu {
        flex-direction: column;
        gap: 10px;
        padding: 20px;
        min-height: 100vh;
        box-sizing: border-box;
        background-color: #1d2330;
        border-color: #1d2330;
        border-radius: 6px;
        margin: 0px !important;
    }

    body {
        margin: 0px;
    }



    html, body {
        overflow-x: hidden;
    }

    #leftMenu {
        background-color: #222;
        width: 250px;
        height: 100vh;
        padding: 20px;
        box-sizing: border-box;
        color: white;
    }

    #leftMenu {
        background-color: #1d2330;
        height: 100vh;
        padding: 20px;
        box-sizing: border-box;
        color: white;
        border: solid 0px;
    }

    .section-title {
        font-size: 1.3em;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
    }

        .section-title i {
            margin-right: 8px;
        }

    .sidebar-section {
        margin-bottom: 30px;
    }

    .sidebar-button {
        display: flex;
        align-items: center;
        background-color: transparent;
        border: none;
        color: white;
        font-size: 1.1em;
        text-align: left;
        padding: 5px 10px;
        width: calc(100% - 20px);
        cursor: pointer;
        transition: background-color 0.3s, border-radius 0.3s;
        position: relative;
    }

        .sidebar-button i {
            margin-right: 10px;
        }

        .sidebar-button::before {
            position: absolute;
            top: 0;
            left: -10px;
            width: 10px;
            height: 100%;
            background-color: inherit;
            border-radius: 5px 0 0 5px;
            transition: background-color 0.3s;
        }

        .sidebar-button:hover {
            background-color: #0d1117;
            border-radius: 15px;
        }

            .sidebar-button:hover::before {
                background-color: #0d1117;
            }

    #createPlayListBTN {
        float: left;
        margin-bottom: 10px;
        margin-top: 10px;
    }

    #glassContDinPlayList {
        margin-left: auto;
        margin-right: auto;
    }

    .create-playlist-container {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .create-playlist-modal {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 400px;
        height: 300px;
        background-color: #1d2330;
        border-radius: 10px;
        padding: 20px;
        z-index: 1001;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.5);
        color: #fff;
    }

    .create-playlist-title {
        text-align: center;
        margin-bottom: 20px;
        font-size: 1.5rem;
        text-transform: uppercase;
    }

    .create-playlist-modal form {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 65%;
    }

    .create-playlist-modal input[type="text"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
        border: 1px solid #fff;
        background-color: transparent;
        color: #fff;
    }

        .create-playlist-modal input[type="text"]::placeholder {
            color: #bbb;
        }

    .create-playlist-btn {
        padding: 10px;
        background-color: #9933cc;
        color: #fff;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

        .create-playlist-btn:hover {
            background-color: #4D4351;
        }

    .playlist-modal-content {
        max-height: 725px;
        overflow-y: scroll;
    }

    .text-divider {
        display: flex;
        align-items: center;
        --text-divider-gap: 1rem;
    }

        .text-divider::before,
        .text-divider::after {
            content: '';
            height: 1px;
            background-color: silver;
            flex-grow: 1;
            margin-left: 36rem;
            margin-right: 36rem;
        }

        .text-divider::before {
            margin-right: var(--text-divider-gap);
        }

        .text-divider::after {
            margin-left: var(--text-divider-gap);
        }

    .playlist-container .plus-button {
        position: absolute;
        z-index: 1;
    }

    .playlist-container .plus-button {
        display: inline-block !important;
    }

    .playlist-name {
        display: flex;
        align-items: center;
    }

    .song-count-container {
        display: inline-block;
        background-color: #9933cc;
        border-radius: 50%;
        padding: 4px 10px;
        margin-left: 5px;
        transition: transform 0.3s, box-shadow 0.3s;
        order: -1;
        box-shadow: 0 0 7px rgba(153, 51, 204, 0.5);
    }

        .song-count-container:hover {
            transform: scale(1.2);
            box-shadow: 0 0 15px rgba(153, 51, 204, 0.8);
        }

    .song-count {
        color: #ffffff;
    }

    .header-container {
        background-image: url('/Content/Images/gagica-muzical-banner.jpg');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .playlist-close {
        align-self: flex-end;
    }

    .song {
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #fff;
    }

    .song-title {
        /* Adjust the font size and other styles as needed */
    }

    .song-options {
        position: relative;
        cursor: pointer;
    }

    .fa-ellipsis-v {
        font-size: 20px;
        margin-right: 10px;
        color: #fff;
    }

    .mini-menu {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        background-color: #333;
        border: 1px solid #555;
        padding: 5px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
        z-index: 1000; /* Add this line */
    }

        .mini-menu.open {
            display: block;
        }

    .delete-btn {
        background-color: transparent;
        border: none;
        cursor: pointer;
        padding: 5px;
        font-size: 14px;
        color: #fff;
    }

        .delete-btn:hover {
            background-color: #7a4ef7; /* Adjust to your desired purple color */
        }

    .song {
        padding-left: 20px !important;
        padding-right: 20px !important;
    }

    .songs-container {
        overflow: visible;
    }

    .custom-menu-container {
        position: relative;
        display: inline-block;
    }

    .custom-menu-button {
        background: none;
        border: none;
        cursor: pointer;
        outline: none;
        font-size: 1.2rem;
        color: #666;
    }

    .custom-menu-content {
        display: none;
        position: absolute;
        background-color: #343a40;
        min-width: 180px;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        right: 0;
        border-radius: 6px;
        margin-top: 5px;
    }

        .custom-menu-content .custom-menu-item {
            color: #ffffff;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            text-align: center;
            font-weight: 500;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .custom-menu-content .custom-menu-item:hover {
                background-color: #9c27b0;
            }

    .custom-sterge-btn {
        color: #ffffff;
    }

    .custom-menu-content.fixed {
        position: fixed;
    }

    .piesa-modal {
        display: none;
        position: fixed;
        z-index: 1001;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .piesa-modal-content {
        background-color: #2c3440;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 30px;
        border: 1px solid #888;
        width: 50%;
        max-width: 400px;
        text-align: center;
        color: white;
        font-size: 1.3em;
        border-radius: 6px;
    }

    #phonePlayListsbtn {
        display: none;
    }

    #tabele-container {
        border-top: 0px !important;
    }

    .close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        font-size: 24px; /* Adjust the font size here to change the size of the close button */
        cursor: pointer;
    }

</style>

<script src="~/Scripts/favorite.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="~/Scripts/toastr.js"></script>
<div class="music-player">
    <audio id="audio"></audio>
    <div class="player-controls">
        <button id="addToPlaylist" class="control-button">
            <img id="playlistBTN" src="~/Content/Images/add-to-playlist.png" alt="play" class="play-icon">
        </button>
        <button id="prev" class="control-button">
            <img src="~/Content/Images/previous.png" alt="previous">
        </button>
        <button id="play" class="control-button">
            <img id="playBTN" src="~/Content/Images/play.png" alt="play" class="play-icon">
            <img id="pauseBTN" src="~/Content/Images/pause.png" alt="pause" class="pause-icon" style="display:none;">
        </button>
        <button id="next" class="control-button">
            <img src="~/Content/Images/next.png" alt="next">
        </button>
        <button id="favorite" class="control-button" data-liked="false">
            <img id="favBTN" class="play-icon favorite-icon fav-btn-animate" src="~/Content/Images/fav-unpressed.png" alt="play" class="play-icon">
            <img id="favBTNPressed" class="pause-icon favorite-icon fav-btn-animate" src="~/Content/Images/fav-pressed.png" alt="pause" class="pause-icon" style="display:none;">
        </button>
        <p id="LikeCount">0 like-uri</p>
        <div id="phonemenu-indicator">
            <img id="treedots" src="~/Content/Images/music-player-mp-menu.png" alt="menu icon">
        </div>
    </div>
    <input style="max-width:80vw" id="progress" class="slider" type="range" min="0" max="50000" step="1" value="0">
    <div class="volume-container">
        <img src="~/Content/Images/volume.png" alt="sound icon" class="sound-icon">
        <input id="volume" class="slider volume-slider" type="range" min="0" max="100" step="1" value="100">
    </div>
    <div class="player-info">
        <div id="song-info" class="song-info">
            <span id="song-title" class="song-title"></span> - <span id="artist-name" class="artist-name"></span>
        </div>
        <div id="time-info" class="time-info">00:00 / 00:00</div>
    </div>
    <div id="control-container">
        <div id="autoplay-container">
            <div id="autoplay-indicator">
                Autoplay: <span id="autoplay-text" class="off">off</span>
            </div>
        </div>
        <div class="loop-container" id="loop-icon">
            <img src="~/Content/Images/loop-unpressed.png" alt="Loop Icon" id="loop-img">
        </div>
    </div>
    <div class="modal" id="phoneMenuModal">
        <div class="modal-content" style="background-image: linear-gradient(135deg, #191d23 0%, #344051 50%, #191d23 100%); max-width: 400px; min-height: 200px; display: flex; justify-content: center; flex-direction: column;">
            <span class="close" style="position: absolute; right: 10px; top: 10px;">&times;</span>
            <div class="options">
                <div class="loop-option">
                    <label for="loop">Loop:</label>
                    <input type="checkbox" id="loop" name="loop">
                </div>
                <div class="autoplay-option">
                    <label for="autoplay">Autoplay:</label>
                    <input type="checkbox" id="autoplay" name="autoplay">
                </div>
            </div>
        </div>
    </div>
</div>



<div id="pieseMainMainContainer" class="container">
    <div class="tabelDiv" id="leftMenu">
        <button class="close-button"><i class="fas fa-times"></i></button>
        <div class="sidebar-section">
            <h3 class="section-title"><i class="fa-solid fa-compact-disc"></i>Playlist-uri</h3>
            <button class="sidebar-button"><i class="fa-solid fa-heart"></i> Favorite</button>
            @if (Model.PieseAllViewModel.PlayLists != null)
            {
                foreach (var playlist in Model.PieseAllViewModel.PlayLists)
                {
                    <button playlistIdSidebar="@playlist.Id" class="sidebar-button"><i class="fas fa-music"></i>@playlist.Name </button>
                }
            }



        </div>
        <div class="sidebar-section">
            <h3 class="section-title"><i class="fas fa-folder"></i> Section 2</h3>
            <button class="sidebar-button"><i class="fas fa-random"></i> Placeholder 1</button>
            <button class="sidebar-button"><i class="fas fa-random"></i> Placeholder 2</button>
        </div>
        <div class="sidebar-section">
            <h3 class="section-title"><i class="fas fa-cog"></i> Section 3</h3>
            <button class="sidebar-button"><i class="fas fa-random"></i> Placeholder 1</button>
            <button class="sidebar-button"><i class="fas fa-random"></i> Placeholder 2</button>
        </div>
    </div>
</div>
<div class="tabelDiv" id="main-container">
    <div class="filter-bar">
        <div class="filter-option">
            <label for="filter1">Filter 1:</label>
            <select name="filter1" id="filter1">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
            </select>
        </div>
        <div class="filter-option">
            <label for="filter2">Filter 2:</label>
            <select name="filter2" id="filter2">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
            </select>
        </div>
        <div class="filter-option">
            <label for="filter3">Filter 3:</label>
            <select name="filter3" id="filter3">
                <option value="option1">Option 1</option>
                <option value="option2">Option 2</option>
            </select>
        </div>
    </div>

    <div class="tabelDiv" id="tabele-container">
        @*    <h2 class="titletabele">Piese</h2>*@

        <div class="buttonsForTables" style="background-color: #0d1117">
            @if (User.IsInRole(Trippin_Website.Models.RoleNames.Admin) || User.IsInRole(Trippin_Website.Models.RoleNames.Producer) || User.IsInRole(Trippin_Website.Models.RoleNames.Artist))
            {
                <div class="glass-container">
                    <div class="glass-btn"><a href="@Url.Action("AdaugaNou", "Piese")">Adauga</a></div>
                </div>
                <div id="phonePlayListsbtn" class="glass-container">
                    <div class="glass-btn"> <a href="">Playlist-uri</a></div>
                </div>
                @*                <button type="button" class="btn btn-outline-info">@Html.ActionLink("Modifica", "Modifica", "Piese")</button>*@
            }
            else
            {
                <p>Din pacate nu ai dreptul de a modifica sau adauga piese!</p>
            }
        </div>
        <div class="TabeleNebune">
            <table id="Piese" class="table table-hover">
                <thead>
                    <tr>
                        <th>Nume Piesa</th>
                        <th>Key</th>
                        <th>BPM</th>
                        <th>Date Created</th>
                        <th>Postat de</th>
                    </tr>
                </thead>
                <tbody>
                    @{ int menuCounter = 0; }
                    @foreach (var piesa in Model.PieseAllViewModel.Piese)
                    {
                        var timeSpan = CurrentDateTime - piesa.DateCreated;

                        if (piesa.IsPublic)
                        {
                            <tr>
                                <td>
                                    <img class="play-icon play-song" piesaId="@piesa.Id" src="/Content/Images/play-fromt-table.png" alt="play" style="display: inline; margin:0.8rem; border-radius : 50%; cursor: pointer">
                                    <img class="pause-icon" src="~/Content/Images/stop-from-table.png" alt="pause" style="display: none; margin:0.8rem; border-radius : 50%; cursor: pointer">
                                    <a href="@Url.Action("Detalii", "Piese", new { id = piesa.Id })">@piesa.Name</a>
                                    @if (timeSpan.TotalDays < 3)
                                    {
                                        <span class="badge rounded-pill bg-info">Nou</span>
                                    }
                                    @if (piesa.DateModified != null)
                                    {
                                        <span class="badge rounded-pill bg-light">Modificat</span>
                                    }
                                    @if (piesa.IsBanger == true)
                                    {
                                        <span class="badge rounded-pill bg-success">Banger</span>
                                    }
                                    @if (piesa.UserId.ToString() == UserId || User.IsInRole("Admin"))
                                    {
                                        <div class="custom-menu-container">
                                            <button class="custom-menu-button" onclick="toggleCustomMenu(event, 'customMenuContent-@menuCounter')">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <div class="custom-menu-content" id="customMenuContent-@menuCounter">
                                                <a class="custom-menu-item custom-modifica-btn" href="@Url.Action("ModificaPiesa", "Piese", new {id = piesa.Id})">Modifica</a>
                                                <div piesaIdForDelete="@piesa.Id" class="custom-menu-item custom-sterge-btn">Sterge</div>
                                            </div>
                                        </div>
                                    }

                                </td>
                                <td>@piesa.Key</td>
                                <td>@piesa.Bpm</td>
                                <td>@piesa.DateCreated</td>
                                @{ menuCounter++; }
                                @{
                                    var userId = User.Identity.GetUserId();
                                }

                                @if (piesa.UserId != null)
                                {
                                    if (userId == piesa.UserId)
                                    {
                                        <td> <a id="yourUserID" href="@Url.Action("Profile", "UsersManagement", new { id = piesa.UserId })">@(Model.UserManager.FindByIdAsync(piesa.UserId).Result.UserName)</a></td>
                                    }
                                    else
                                    {
                                        <td> <a href="@Url.Action("Profile", "UsersManagement", new { id = piesa.UserId })">@(Model.UserManager.FindByIdAsync(piesa.UserId).Result.UserName)</a></td>
                                    }


                                }
                                else
                                {
                                    <td> </td>
                                }


                            </tr>
                        }


                    }
                </tbody>
            </table>
            <div id="deletePiesaModal" class="piesa-modal">
                <div class="piesa-modal-content">
                    <p>Esti sigur ca vrei sa stergi piesa?</p>
                    <button id="yesDeletePiesaBtn" class="btn btn-success">Da</button>
                    <button id="noDeletePiesaBtn" class="btn btn-danger">Nu</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="playlist-modal" id="playlistModal">
    <div class="playlist-modal-content">
        <div class="header-container">
            <span class="playlist-close">&times;</span>
            <h2 id="playlistsHead">Playlist-uri</h2>
            <div id="glassContDinPlayList" class="glass-container">
                <div id="createPlayListBTN" class="glass-btn"><a href="">Creeaza un playlist</a></div>
            </div>
        </div>

        @{
            var playlistContents = Model.PieseAllViewModel.PlaylistContent;
        }
        @if (Model.PieseAllViewModel.PlaylistContent != null)
        {
            foreach (var playlist in Model.PieseAllViewModel.PlayLists)
            {


                <div playlistId="@playlist.Id" class="playlist-container">
                    <div class="playlist-name text-divider">
                        <span>  @playlist.Name </span>
                        <span class="song-count-container">
                            <span class="song-count" data-count="0">0</span>
                        </span>
                    </div>
                    <span id="addButton" class="plus-button add-song-button"><i class="fa-solid fa-plus" style="margin-right: 2rem;"></i></span>
                    <span id="deletePlaylistBtn" class="plus-button"><i class="fa-solid fa-trash" style="color: #f00f0f;"></i></span>

                    <div class="songs-container" style="display: none;">
                        @foreach (var item in playlistContents)
                        {
                            if (item.playlistId == playlist.Id.ToString())
                            {
                                <div song-Id="@item.piesaId" class="song">
                                    <span class="song-title">@item.SongName</span>
                                    <div class="song-options">
                                        <i class="fa fa-ellipsis-v"></i>
                                        <div class="mini-menu">
                                            <button id="deleteBtn" class="delete-btn">Sterge</button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }

                    </div>
                </div>
            }
        }
        else
        {
            <div class="playlist-container">
                <div class="playlist-name">
                    <span>Nu ai inca nici un playlist adaugat</span>
                </div>
            </div>
        }


        <!-- Add more playlist containers here -->
        @*        <div class="additional-features">
                <h3>Additional Features</h3>
                <div class="feature-placeholder">Feature 1</div>
                <div class="feature-placeholder">Feature 2</div>
            </div>*@
    </div>
</div>
<div class="create-playlist-container">
    <div class="create-playlist-modal">
        <h2 class="create-playlist-title">Alege numele pentru playlist</h2>
        <form>
            <input id="createPlaylistTextArea" type="text" placeholder="Numele playlist-ului" />
            <button id="createPlaylist" type="submit" class="create-playlist-btn">Creeaza</button>
        </form>
    </div>
</div>


@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        $(".custom-sterge-btn").click(function () {
            var piesaIdForDelete = $(this).attr("piesaIdForDelete");
            $("#deletePiesaModal").show();
            $("#yesDeletePiesaBtn").data("piesaIdForDelete", piesaIdForDelete);
        });

        // Close the modal when clicking the "No" button or outside the modal
        $("#noDeletePiesaBtn, .piesa-modal").click(function () {
            $("#deletePiesaModal").hide();
        });

        // Stop event propagation to avoid closing the modal when clicking inside the modal content
        $(".piesa-modal-content").click(function (event) {
            event.stopPropagation();
        });

        // Perform the AJAX call and close the modal when clicking the "Yes" button
        $("#yesDeletePiesaBtn").click(function () {
            var button = $(this);
            var piesaIdForDelete = button.data("piesaIdForDelete");
            $.ajax({
                url: "/API/PieseAPI/" + piesaIdForDelete,
                method: "DELETE",
                contentType: 'application/json',
                success: function () {
                    $("div[piesaIdForDelete='" + piesaIdForDelete + "']").parents("tr").remove();
                    $("#deletePiesaModal").hide();
                }
            });
        });
    </script>
    <script>

        //Little protection layer
        //Daca vezi asta, nu ar trebuii sa fii aici. Esti perseverent totusi, felicitari, dar nu fura piesela sau beat-urile oamenilor pentru ca nu este frumos.
        //--------------------------------------
        //use this to disable right-click
        /*        document.addEventListener('contextmenu', event => {
                    event.preventDefault();
                    toastr.warning('Click dreapta este dezactivat pe aceasta pagina!', 'Atentie!');
                });
        */
        document.addEventListener("keydown", function (e) {
            if (e.key === "F12") {
                e.preventDefault();
                toastr.warning('Din pacate nu poti folosi Developer Tools pe aceasta pagina', 'Atentie!');
            }
        });
        //-----------------------------------------------------------------------------------------------
        document.getElementById('addToPlaylist').addEventListener('click', function () {
            document.getElementById('playlistModal').style.display = 'block';
        });

        $(document).ready(function () {
            // add click event listener to the button
            $('#phonePlayListsbtn').click(function (event) {
                // prevent the default action of refreshing the page
                event.preventDefault();

                // toggle the display property of the left menu
                $('#leftMenu').css('display', 'flex');

                // add a slide-in animation using CSS transitions
                $('#leftMenu').css({
                    'transition': 'transform 0.3s ease-in-out',
                    'transform': 'translateX(0)'
                });
            });
        });

        document.querySelector('.playlist-close').addEventListener('click', function () {
            const playlistModal = document.getElementById('playlistModal');
            playlistModal.style.display = 'none';
            // Remove inline styles to ensure the animation plays every time the modal is opened
            setTimeout(() => {
                playlistModal.style.cssText = '';
            }, 300);
        });

        window.addEventListener('click', function (event) {
            const playlistModal = document.getElementById('playlistModal');
            if (event.target === playlistModal) {
                playlistModal.style.display = 'none';
                // Remove inline styles to ensure the animation plays every time the modal is opened
                setTimeout(() => {
                    playlistModal.style.cssText = '';
                }, 300);
            }
        });

        // Use event delegation for click events on playlist names
        document.body.addEventListener('click', function (event) {
            if (event.target.classList.contains('playlist-name')) {
                const songsContainer = event.target.nextElementSibling;
                if (songsContainer.style.display === 'none') {
                    songsContainer.style.display = 'block';
                } else {
                    songsContainer.style.display = 'none';
                }
            }
        });

        document.body.addEventListener('click', function (event) {
            // Check if the clicked element or its parent has the 'playlist-container' class
            const container = event.target.closest('.playlist-container');
            if (container) {
                // Ignore clicks on plus-button, song or their child elements
                if (event.target.closest('.plus-button') || event.target.closest('.song')) {
                    return;
                }

                const songsContainer = container.querySelector('.songs-container');
                if (songsContainer.style.display === 'none') {
                    songsContainer.style.display = 'block';
                } else {
                    songsContainer.style.display = 'none';
                }
            }
        });
        $(document).on('click', '.song-options', function () {
            $(this).find('.mini-menu').toggleClass('open');
        });


        $(document).on('click', function (e) {
            if (!$(e.target).closest('.song-options').length) {
                $('.mini-menu.open').removeClass('open');
            }
        });

    </script>


    <script>
        var createPlaylistBtn = document.getElementById('createPlayListBTN');
        var createPlaylistContainer = document.querySelector('.create-playlist-container');
        var createPlaylistModal = document.querySelector('.create-playlist-modal');

        createPlaylistBtn.addEventListener('click', function (event) {
            event.preventDefault();
            createPlaylistContainer.style.display = 'flex';
        });

        createPlaylistContainer.addEventListener('click', function (event) {
            if (event.target === createPlaylistContainer) {
                createPlaylistContainer.style.display = 'none';
            }
        });

        createPlaylistModal.addEventListener('click', function (event) {
            event.stopPropagation();
        });

        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                createPlaylistContainer.style.display = 'none';
            }
        });

        var createPlaylistForm = document.querySelector('.create-playlist-modal form');

        createPlaylistForm.addEventListener('submit', function (event) {
            event.preventDefault();
            createPlaylistContainer.style.display = 'none';

        });


        var currentMenuContent;

        function toggleCustomMenu(event, menuId) {
            var customMenuContent = document.getElementById(menuId);

            if (currentMenuContent && currentMenuContent !== customMenuContent) {
                currentMenuContent.style.display = "none";
            }

            customMenuContent.style.display = customMenuContent.style.display === "block" ? "none" : "block";
            currentMenuContent = customMenuContent;

            event.stopPropagation();
        }

        document.addEventListener("click", function () {
            if (currentMenuContent) {
                currentMenuContent.style.display = "none";
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            $("#Piese").DataTable({
                "order": [[3, "desc"]],
                language: {
                    lengthMenu: 'Arata _MENU_ piese',
                    search: 'Cauta :',
                    info: 'Vizibil _START_ din _END_ din total de _TOTAL_ piese',
                    paginate: {
                        previous: 'Pagina anterioara',
                        next: 'Pagina urmatoare'
                    },
                }
            });
        });
        $(document).ready(function () {
            const phoneMenuModal = document.getElementById("phoneMenuModal");

            const phoneMenuButton = document.getElementById("treedots");

            const closeModalButton = document.getElementsByClassName("close")[0];

            phoneMenuButton.onclick = function () {
                phoneMenuModal.style.display = "block";
            }

            closeModalButton.onclick = function () {
                phoneMenuModal.style.display = "none";
            }
            window.onclick = function (event) {
                if (event.target == phoneMenuModal) {
                    phoneMenuModal.style.display = "none";
                }
            }
        });

        $(document).ready(function () {
            $(".play-icon").css("background-image", "url(" + $(".play-icon").data("play-src") + ")");
        });
        $(".play-icon").click(function () {

            if ($(this).data("state") === "playing") {
                $(this).css("background-image", "url(" + $(this).data("play-src") + ")");
                $(this).data("state", "not-playing");
            } else {
                $(this).css("background-image", "url(" + $(this).data("pause-src") + ")");
                $(this).data("state", "playing");
            }
        });
    </script>


    <script>




        function triggerFavBtnAnimation() {
            var favBtns = document.querySelectorAll('.fav-btn-animate');
            for (var i = 0; i < favBtns.length; i++) {
                favBtns[i].classList.add('fav-btn-animation');
            }

            setTimeout(function () {
                for (var i = 0; i < favBtns.length; i++) {
                    favBtns[i].classList.remove('fav-btn-animation');
                }
            }, 400);
        }

        function updateButtonState(hasLiked) {
            if (hasLiked) {
                $("#favBTN").hide();
                $("#favBTNPressed").show();
            } else {
                $("#favBTN").show();
                $("#favBTNPressed").hide();
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            var closeButton = document.querySelector(".close-button");
            closeButton.addEventListener("click", function () {
                var leftMenu = document.getElementById("leftMenu");
                leftMenu.style.display = "none";
            });
        });

        function favorites(pieId, updateOnly) {
            var likeBtn = $("#favorite");
            var likeCount = $("#LikeCount");

            function fetchLikeState() {
                $.get("/api/socialapi/" + pieId, function (data) {
                    hasLiked = data.alreadyLiked;
                    likeCount.text(data.likes + " favorite");
                    updateButtonState(hasLiked);
                    likeBtn.attr("data-liked", hasLiked);
                });
            }

            fetchLikeState();

            if (!updateOnly) {
                likeBtn.off('click').on('click', function (e) {
                    e.preventDefault();
                    var url = "/api/socialapi/" + pieId;
                    var alreadyLiked = likeBtn.attr("data-liked") === "true";
                    var action = alreadyLiked ? "unlike" : "like";
                    triggerFavBtnAnimation();

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: { Id: pieId },
                        success: function (data) {
                            if (data.success) {
                                hasLiked = !alreadyLiked;
                                likes = data.count;
                                likeCount.text(likes + " favorite");
                                likeBtn.attr("data-liked", hasLiked);

                                updateButtonState(hasLiked);
                            }
                        },
                        error: function () {
                            toastr.warning('Ceva nu a mers bine!')
                        }
                    });
                });
            }
        }
    </script>
    <script>


        $(document).ready(function () {
            var listOfIds;

            $.ajax({
                url: '/API/GetAll',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    listOfIds = data;

                    const audio = document.getElementById('audio');
                    const playButton = document.getElementById('play');
                    const prevButton = document.getElementById('prev');
                    const nextButton = document.getElementById('next');
                    const progressBar = document.getElementById('progress');
                    const volumeSlider = document.getElementById('volume');
                    const songTitleContainer = document.getElementById('song-title');
                    const autoplaySwitch = document.getElementById('autoplay');

                    audio.addEventListener('timeupdate', updateTimeInfo);

                    let isPlaying = false;

                    document.getElementById('autoplay-text').addEventListener('click', () => {
                        const textElement = document.getElementById('autoplay-text');
                        const isChecked = textElement.classList.contains('off');

                        if (isChecked) {
                            audio.autoplay = true;
                            textElement.classList.remove('off');
                            textElement.classList.add('on');
                            textElement.textContent = 'on';
                        } else {
                            audio.autoplay = false;
                            textElement.classList.remove('on');
                            textElement.classList.add('off');
                            textElement.textContent = 'off';
                        }
                    });

                    const loopButton = document.getElementById('loop-img');
                    let isLooping = false;

                    loopButton.addEventListener('click', () => {
                        isLooping = !isLooping;
                        audio.loop = isLooping;

                        if (isLooping) {
                            loopButton.src = '/Content/Images/loop-pressed.png';
                            loopButton.classList.add('loop-active');
                        } else {
                            loopButton.src = '/Content/Images/loop-unpressed.png';
                            loopButton.classList.remove('loop-active');
                        }
                    });

                    playButton.addEventListener('click', () => {
                        if (isPlaying) {
                            audio.pause();
                        } else {
                            audio.play();
                        }
                    });
                    audio.addEventListener('play', () => {
                        isPlaying = true;
                        document.querySelector('#play .play-icon').style.display = 'none';
                        document.querySelector('#play .pause-icon').style.display = 'inline';
                        updatePlayPauseIcons();
                    });

                    audio.addEventListener('pause', () => {
                        isPlaying = false;
                        document.querySelector('#play .play-icon').style.display = 'inline';
                        document.querySelector('#play .pause-icon').style.display = 'none';
                        updatePlayPauseIcons();
                    });

                    function updateProgressBar() {
                        const currentTime = audio.currentTime;
                        const duration = audio.duration;
                        progressBar.value = (currentTime / duration) * 50000;
                        requestAnimationFrame(updateProgressBar);
                    }

                    updateProgressBar();

                    progressBar.addEventListener('input', () => {
                        const progress = progressBar.value;
                        const duration = audio.duration;
                        audio.currentTime = (progress / 50000) * duration;
                    });

                    function bindPlaySongEvent() {
                        $('.play-song').off('click').on('click', function () {
                            const songId = $(this).attr('piesaId');
                            const index = listOfIds.indexOf(songId);

                            if (index > -1) {
                                $('.song-playing').removeClass('song-playing');
                                $(this).addClass('song-playing');
                                $(this).siblings('.pause-icon').addClass('song-playing');

                                currentSongIndex = index;
                                loadSong(currentSongIndex);
                                if (!isPlaying) {
                                    playButton.click();
                                }
                            }
                        });
                    }

                    function bindPauseSongEvent() {
                        $('.pause-icon').off('click').on('click', function () {
                            if (isPlaying) {
                                playButton.click();
                            }
                        });
                    }

                    function updatePlayPauseIcons() {

                        $('.pause-icon:not(#play .pause-icon, .favorite-icon)').hide();
                        $('.play-icon:not(#play .play-icon, .favorite-icon)').show();

                        if (isPlaying) {
                            $('*[data-playing="true"].pause-icon:not(.favorite-icon)').show();
                            $('*[data-playing="true"].play-icon:not(.favorite-icon)').hide();
                        }

                        if (hasLiked) {
                            $('.favorite-icon#favBTN').hide();
                            $('.favorite-icon#favBTNPressed').show();
                        } else {
                            $('.favorite-icon#favBTN').show();
                            $('.favorite-icon#favBTNPressed').hide();
                        }
                    }

                    function getSongCount(playlistContainer) {
                        return playlistContainer.querySelectorAll('.songs-container .song').length;
                    }

                    function updateSongCountElement(playlistContainer) {
                        const songCountElement = playlistContainer.querySelector('.song-count');
                        const newSongCount = getSongCount(playlistContainer);
                        songCountElement.setAttribute('data-count', newSongCount);
                        songCountElement.textContent = `${newSongCount}`;
                    }
                    const songs = listOfIds;
                    let currentSongIndex = 0;
                    let currentPieId = null;
                    function loadSong(index) {
                        if (isPlaying) {
                            audio.play();
                        }

                        const song = songs[index];


                        $(document).on('keydown', function (event) {

                            if (event.keyCode === 32) {
                                if (!$('#Piese_filter input').is(':focus') && $('.create-playlist-container').css('display') === 'none') {
                                    event.preventDefault();

                                    if (isPlaying) {
                                        audio.pause();
                                    } else {
                                        audio.play();
                                    }
                                }
                            }
                            else if (event.keyCode === 38 || event.keyCode === 40) {
                                event.preventDefault();
                                var volume = audio.volume;
                                if (event.keyCode === 38) {
                                    if (volume < 1) {
                                        volume += 0.1;
                                    }
                                } else if (event.keyCode === 40) {
                                    if (volume > 0) {
                                        volume -= 0.1;
                                    }
                                }
                                audio.volume = volume;
                                $('#volume').val(volume * 100);
                            } else if (event.keyCode === 37 || event.keyCode === 39) {
                                event.preventDefault();
                                var currentTime = audio.currentTime;
                                var duration = audio.duration;
                                if (event.keyCode === 37) {
                                    currentTime -= 5;
                                    if (currentTime < 0) {
                                        currentTime = 0;
                                    }
                                } else if (event.keyCode === 39) {
                                    currentTime += 5;
                                    if (currentTime > duration) {
                                        currentTime = duration;
                                    }
                                }
                                audio.currentTime = currentTime;
                                $('#progress').val((currentTime / duration) * 50000);
                            }
                        });
                        var currentSongId = null;
                        $.ajax({
                            url: '/API/MusicPlayer',
                            type: 'GET',
                            dataType: 'json',
                            data: {
                                audioId: song
                            },
                            success: function (data) {
                                updateSongInfo(data);


                                function updateSongInfo(data) {
                                    audio.src = data.src;
                                    document.title = data.title;
                                    document.getElementById('song-title').textContent = data.title;
                                    hasLiked = data.hasLiked;
                                    const artistNameElement = document.getElementById('artist-name');
                                    artistNameElement.innerHTML = 'Nici un artist adaugat';
                                    if (data.artists.length < 1) {
                                        artistNameElement.innerText = "Nici un artist adaugat";
                                    } else {
                                        artistNameElement.innerText = data.artists.join(', ');
                                    }


                                    $('.add-song-button').each(function () {
                                        var songId = data.id;
                                        $(this).off('click').click(function () {
                                            addToPlaylist(songId, $(this));
                                        });
                                    });
                                    currentSongId = data.id;
                                    registerAddSongButtonClickEvent();
                                }
                                $(document).on('click', '.addButton', function () {
                                    addToPlaylist(currentSongId, $(this));
                                });




                                $('#createPlaylist').click(function (event) {
  event.preventDefault();

  var playlistName = $('.create-playlist-modal input[type="text"]').val();
  const UserId = '@Html.Raw(UserId)';

    //--------------------------------------------------------------------------
                                    $.ajax({
                                        url: '/CreatePlaylist/' + UserId + '/' + playlistName,
                                        type: 'POST',
                                        dataType: 'json',
                                        contentType: 'application/json',
                                        accepts: 'application/json',
                                        success: function (data) {
                                            if (data.success === true) {
                                                toastr.success('Playlist-ul a fost creat cu succes');
                                                $('.create-playlist-container').css('display', 'none');

                                                $('.playlist-container:first').before(`
                <div playlistid="${data.playlistId}" class="playlist-container">
                    <div class="playlist-name text-divider">
                        <span class="playlist-title">${playlistName}</span>
                        <span class="song-count-container">
                            <span class="song-count" data-count="0">0</span>
                        </span>
                    </div>
                    <span class="addButton plus-button add-song-button"><i class="fa-solid fa-plus" style="margin-right: 2rem;"></i></span>
                    <span id="deletePlaylistBtn" class="plus-button"><i class="fa-solid fa-trash" style="color: #f00f0f;"></i></span>
                    <div class="songs-container" style="display: none;">
                    </div>
                </div>
            `);

                                                const newPlaylistContainer = document.querySelector(`div[playlistId="${data.playlistId}"]`);
                                                const newSongsContainer = newPlaylistContainer.querySelector('.songs-container');

                                                songCountObserver.observe(newSongsContainer, { childList: true });

                                                updateSongCountElement(newPlaylistContainer);

                                                $('.create-playlist-modal input[type="text"]').val('');
                                            } else {
                                                toastr.error('A aparut o eroare la crearea playlist-ului');
                                            }
    },
    error: function (jqXHR, textStatus, errorThrown) {
      toastr.error('A aparut o eroare la crearea playlist-ului');
      console.log(textStatus + ': ' + errorThrown);
    }
  });
});




function addToPlaylist(songId, addSongButtonElement) {

    var playlistId = addSongButtonElement.parent().attr('playlistId');
    var userId = '@Html.Raw(UserId)';

    $.ajax({
        url: '/AddToPlaylist/' + playlistId + '/' + songId + '/' + userId,
        type: 'POST',
        dataType: 'json',
        contentType: 'application/json',
        accepts: 'application/json',
        success: function (data) {
            if (data.success === true && data.alreadyInPlaylist === false) {
                toastr.success('Piesa a fost adaugata in playlist cu succes');

                var songsContainer = $(`div[playlistId=${playlistId}]`).find('.songs-container');

                var newSongDiv = $('<div>')
                    .attr('song-Id', songId)
                    .addClass('song');

                var songTitle = $('<span>')
                    .addClass('song-title')
                    .text(data.songName);

                var songOptions = $('<div>')
                    .addClass('song-options')
                    .append($('<i>').addClass('fa fa-ellipsis-v'));

                var miniMenu = $('<div>')
                    .addClass('mini-menu')
                    .append($('<button>')
                        .attr('id', 'deleteBtn')
                        .addClass('delete-btn')
                        .text('Sterge')
                    );

                songOptions.append(miniMenu);
                newSongDiv.append(songTitle, songOptions);

                songsContainer.append(newSongDiv);


                const playlistContainer = addSongButtonElement.closest('.playlist-container');
                const songCountElement = playlistContainer.querySelector('.song-count');
                const newSongCount = getSongCount(playlistContainer);
                songCountElement.setAttribute('data-count', newSongCount);
                songCountElement.textContent = `(${newSongCount})`;
            } else if (data.success === true && data.alreadyInPlaylist === true) {
                toastr.success('Piesa exista deja in playlist');
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            toastr.error('A aparut o eroare la adaugarea piesei in playlist');
            console.log(textStatus + ': ' + errorThrown);
        }
    });
}
                                audio.onloadeddata = function () {
                                    if (isPlaying) {
                                        audio.play();
                                    }
                                    $('.play-icon, .pause-icon').removeAttr('data-playing');

                                    const currentPlayIcon = $(`.play-icon[piesaid="${listOfIds[currentSongIndex]}"]`);
                                    const currentPauseIcon = currentPlayIcon.siblings('.pause-icon');
                                    currentPlayIcon.attr('data-playing', 'true');
                                    currentPauseIcon.attr('data-playing', 'true');

                                    updatePlayPauseIcons();

                                    if (data.id && data.id !== currentPieId) {
                                        currentPieId = data.id;
                                        favorites(data.id);
                                        updateButtonState(hasLiked);
                                    }
                                };

                            },

                            error: function (jqXHR, textStatus, errorThrown) {
                                alert('Actiunea a esuat');
                                console.log(textStatus + ': ' + errorThrown);
                            }
                        });
                    }

                    document.querySelectorAll('.playlist-container').forEach((playlistContainer) => {
                        updateSongCountElement(playlistContainer);
                    });

                    const songCountObserver = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            if (mutation.type === 'childList' && mutation.target.classList.contains('songs-container')) {
                                const playlistContainer = mutation.target.closest('.playlist-container');
                                const songCountElement = playlistContainer.querySelector('.song-count');
                                const newSongCount = getSongCount(playlistContainer);
                                songCountElement.setAttribute('data-count', newSongCount);
                                songCountElement.textContent = `${newSongCount}`;
                            }
                        });
                    });

                    document.querySelectorAll('.songs-container').forEach((songsContainer) => {
                        songCountObserver.observe(songsContainer, { childList: true });
                    });

                    function registerAddSongButtonClickEvent() {
                        $('.add-song-button').one('click', function () {
                            addToPlaylist(currentSongId, $(this));
                            registerAddSongButtonClickEvent();
                        });
                    }

                    function updateTimeInfo() {
                        var currentTime = Math.floor(audio.currentTime);
                        var totalTime = Math.floor(audio.duration);
                        var elapsedMinutes = Math.floor(currentTime / 60);
                        var elapsedSeconds = currentTime % 60;
                        var totalMinutes = Math.floor(totalTime / 60);
                        var totalSeconds = totalTime % 60;

                        document.getElementById('time-info').innerText = (elapsedMinutes < 10 ? '0' + elapsedMinutes : elapsedMinutes) + ':' +
                            (elapsedSeconds < 10 ? '0' + elapsedSeconds : elapsedSeconds) + ' / ' +
                            (totalMinutes < 10 ? '0' + totalMinutes : totalMinutes) + ':' +
                            (totalSeconds < 10 ? '0' + totalSeconds : totalSeconds);
                    }

                    volumeSlider.addEventListener('input', () => {
                        const volume = volumeSlider.value / 100;
                        audio.volume = volume;
                    });
                    prevButton.addEventListener('click', () => {
                        if (isPlaying) {
                            audio.pause();
                        }
                        currentSongIndex--;
                        if (currentSongIndex < 0) {
                            currentSongIndex = songs.length - 1;
                        }
                        loadSong(currentSongIndex);
                        if (isPlaying) {
                            audio.play();
                        }
                    });

                    nextButton.addEventListener('click', () => {
                        if (isPlaying) {
                            audio.pause();
                        }
                        currentSongIndex++;
                        if (currentSongIndex >= songs.length) {
                            currentSongIndex = 0;
                        }
                        loadSong(currentSongIndex);
                        if (isPlaying) {
                            audio.play();
                        }
                    });

                    audio.addEventListener('ended', () => {
                        setTimeout(() => {
                            nextButton.click();
                        }, 100);
                    });

                    loadSong(currentSongIndex);
                    bindPlaySongEvent();
                    bindPauseSongEvent();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus + ': ' + errorThrown);
                }
            });
        });
        document.querySelectorAll('.playlist-container').forEach(function (container) {
            updatePlaylistTitleSongCount(container);
        });
    </script>

    <script>



        $(document).ready(function () {
            const loopCheckbox = document.getElementById("loop");
            const autoplayCheckbox = document.getElementById("autoplay");

            loopCheckbox.checked = audio.loop;
            autoplayCheckbox.checked = audio.autoplay;

            loopCheckbox.addEventListener("change", function () {
                audio.loop = this.checked;
            });

            autoplayCheckbox.addEventListener("change", function () {
                audio.autoplay = this.checked;
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $(document).on('click', '.plus-button', function () {
                if ($(this).attr('id') === 'deletePlaylistBtn') {
                    var playlistId = $(this).closest('.playlist-container').attr('playlistId');

                    var userId = '@Html.Raw(UserId)';
                    $.ajax({
                        url: `/DeletePlaylist/${playlistId}/${userId}`,
                        type: 'DELETE',
                        success: function (response) {
                            if (response.success) {
                                $(`div[playlistId=${playlistId}]`).remove();
                                toastr.success('Playlist-ul a fost sters cu success!')
                            }
                        },
                        error: function (xhr, status, error) {
                            toastr.error('A aparut o eroare la stergerea playlistului!')
                            console.log("Error: ", xhr.responseText);
                        }
                    });
                }
            });
        });
        $(document).on('click', '.delete-btn', function () {
    var songElement = $(this).closest('.song');
    var songId = songElement.attr('song-Id');
    var playlistElement = songElement.closest('.playlist-container');
    var playlistId = playlistElement.attr('playlistId');
    var userId = '@Html.Raw(UserId)';

    $.ajax({
        url: '/DeletePlaylist/' + playlistId + '/' + songId + '/' + userId,
        type: 'DELETE',
        dataType: 'json',
        contentType: 'application/json',
        accepts: 'application/json',
        success: function (data) {
            if (data.success === true) {
                toastr.success('Piesa a fost stearsa cu succes');
                songElement.remove();

                const playlistContainer = songElement.closest('.playlist-container');
                const songCountElement = playlistContainer.querySelector('.song-count');
                const newSongCount = getSongCount(playlistContainer);
                songCountElement.setAttribute('data-count', newSongCount);
                songCountElement.textContent = `(${newSongCount})`;

            } else {
                toastr.error('A aparut o eroare la stergerea piesei');
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            toastr.error('A aparut o eroare la stergerea piesei');
            console.log(textStatus + ': ' + errorThrown);
        }
    });
});
    </script>

    <link href="~/Content/toastrRestyle.css" rel="stylesheet" />

}
