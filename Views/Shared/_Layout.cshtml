@using Microsoft.AspNet.Identity.EntityFramework;
@using Trippin_Website.Models;
@using Trippin_Website.Logic_classes;
@{

    /*  var ListOfUsers = Model.Users;*/
    var userId = User.Identity.GetUserId();
    /*    var user = ListOfUsers.SingleOrDefault(m => m.Id == userId);*/
    UserManager<ApplicationUser> _userManager = new UserManager<ApplicationUser>(new UserStore<ApplicationUser>(new ApplicationDbContext()));

    var currentUser = _userManager.FindById(userId);
}



<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Trippin</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<style>
    #RegisterBtn {
        display: inline-block;
    }

    #LoginBtn {
        display: inline;
    }

    .nav navbar-nav {
        background-color: red;
    }

    #profilepic {
        width: fit-content;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
        margin-right: 7px;
    }

    #notification-icon {
        width: fit-content;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        margin-right: 15px;
    }

    #profilepicmenu {
        display: block;
        width: fit-content;
        height: 80px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .right-menu-profile {
        margin: 7px;
    }

    .logout-btn {
        display: block;
        margin: 0 auto;
    }

    #noti_Container {
        position: relative;
        width: 31px;
        height: 16px;
    }

    .noti_bubble {
        position: absolute;
        top: -11px;
        right: 23px;
        padding: 1px 2px 1px 2px;
        background-color: red;
        color: white;
        font-weight: bold;
        font-size: 0.55em;
        border-radius: 30px;
        box-shadow: 1px 1px 1px gray;
    }

    .noti_bubble {
        position: absolute;
        top: 8px;
        right: 20px;
        background-color: red;
        color: white;
        font-size: 12px;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        line-height: 20px;
        text-align: center;
    }

    .notification-container {
        position: absolute;
        top: 86px;
        right: 10px;
        background-color: white;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        border-radius: 5px;
        min-width: 200px;
        z-index: 1;
        display: none;
        padding: 10px;
        border: 1px solid #ddd;
        font-size: 14px;
        line-height: 1.5;
        font-family: Arial, sans-serif;
    }

        .notification-container h5 {
            margin-top: 0px;
            margin-bottom: 10px;
            font-size: 16px;
            font-weight: bold;
            color: #888888;
        }

        .notification-container p {
            margin-top: 0px;
            margin-bottom: 0px;
        }

        .notification-container a {
            display: block;
            margin-top: 10px;
            color: #888888;
            text-decoration: none;
            font-weight: bold;
        }

            .notification-container a:hover {
                background-color: #f5f5f5;
            }

    .notification-container {
        background-color: #21262d;
        color: #fff;
    }

    #quota {
        display: inline;
        margin-top:auto;
        margin-bottom:auto;
        margin-right: 10px;
        font-size: larger;
    }
    #usage{
        display: block;
        text-align:center;
    }
</style>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" @Html.ActionLink("Trippin", "Index", "Home")</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor02" aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
                <span onclick="toggleMenu()" id="navbar-toggler" class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarColor02">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" @Html.ActionLink("Home", "Index", "Home")
                <span class="visually-hidden">(current)</span>
            </a>

                    </li>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Piese")">
                                <span>Piese</span>
                            </a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Beaturi")">
                                <span>Beat-uri</span>
                            </a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" aria-haspopup="true" aria-expanded="false" onClick="toggleDropdown('tools-dropdown')">Tools</a>
                            <div class="dropdown-menu" data-bs-popper="static" id="tools-dropdown">
                                <a class="dropdown-item" href="@Url.Action("YoutubeDownload", "Tools")">
                                    <span>YouToube Download</span>
                                </a>
                                <a class="dropdown-item" href="@Url.Action("LinkTemporar", "Tools")">
                                    <span>Genereaza link temporar</span>
                                </a>
                                <a class="dropdown-item" href="@Url.Action("AnalizeazaSunet", "Tools")">
                                    <span>Gaseste gama</span>
                                </a>
                            </div>
                        </li>



                        if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" role="button" aria-haspopup="true" aria-expanded="false" onClick="toggleDropdown('admin-dropdown')">Admin</a>
                                <div class="dropdown-menu" data-bs-popper="static" id="admin-dropdown">
                                    <a class="dropdown-item" href="@Url.Action("Index", "UsersManagement")">
                                        <span>Manageriaza conturi</span>
                                    </a>
                                    <a class="dropdown-item" href="#">Dashboard</a>
                                </div>
                            </li>
                        }

                    }

                </ul>

                @if (User.Identity.IsAuthenticated)
                {
                    if (User.IsInRole("Admin"))
                    {
                        <strong style="color: #9933cc;" id="quota">UNLIMITED</strong>
                    }
                    else
                    {
                        var usageLeft = currentUser.FileUploadHardLimit - currentUser.Quota;
            <p id="quota">Spatiu disponibil :   <strong > @usageLeft.ConvertToDigitalStorageSize()</strong> </p> 
                    }

                }




                <div class="right-menu-profile">



                    @if (User.Identity.IsAuthenticated)
                    {



                        <div id="notification-wrapper">
                            <span id="noti_Container" onclick="toggleNotification()">
                                <img id="notification-icon" src="~/Content/Images/notification-icon.png" alt="Alternate Text" />
                                <div class="noti_bubble">2</div>
                            </span>

                            <img id="profilepic" src="" alt="Alternate Text" onclick="toggleMenu()" />


                            @Html.ActionLink(User.Identity.GetUserName() + "!", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })

                            @if (User.IsInRole("Admin"))
                            {
                                <span class="badge rounded-pill bg-info">Admin</span>
                            }
                            else if (User.IsInRole("Producer"))
                            {
                                <span class="badge rounded-pill bg-primary">Producer</span>
                            }
                            else if (User.IsInRole("Artist"))
                            {
                                <span class="badge rounded-pill bg-success">Artist</span>
                            }

                        </div>
                    }


                    @if (!Request.IsAuthenticated)
                    {
                        <ul class="nav navbar-nav navbar-right">
                            <button id="RegisterBtn" class="btn btn-outline-info" type="button">@Html.ActionLink("Inregistrează-te", "Register", "Account", routeValues: null, htmlAttributes: new { id = "registerLink" }) </button>
                            <button id="LoginBtn" class="btn btn-outline-info" type="button"> @Html.ActionLink("Log in", "Login", "Account", routeValues: null, htmlAttributes: new { id = "loginLink" }) </button>
                        </ul>
                    }



                </div>


                @*          <form class="d-flex">
            <input class="form-control me-sm-2" type="search" placeholder="Search">
            <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
        </form>*@



            </div>
            @if (User.Identity.IsAuthenticated)
            {

              

                <div id="notification-dropdown" class="dropdown">
                    <div class="dropdown-menu" aria-labelledby="notification-dropdown">
                        <h5 class="dropdown-header">Notifications</h5>
                        <a class="dropdown-item" href="#">Notification 1</a>
                        <a class="dropdown-item" href="#">Notification 2</a>
                        <a class="dropdown-item" href="#">Notification 3</a>
                        <a class="dropdown-item" href="#">Notification 4</a>
                    </div>
                </div>
                <div class="notification-container" id="notification-container">
                    <h5>Notifications</h5>
                    <p>You have a new message from John Doe</p>
                    <a href="#">View all notifications</a>
                </div>


                <div class="sub-menu-wrap" id="subMenu">
                    <div class="sub-menu">
                        <div class="user-info">
                            <img id="profilepicmenu" src="~/Content/Images/No-profile-picture.jpg" alt="Alternate Text" />
                            <h4>
                                @User.Identity.GetUserName()
                            </h4>
                            @if (User.IsInRole("Admin"))
                            {
                                <span style="margin-left: 10px" class="badge rounded-pill bg-info">Admin</span>
                            }
                            else if (User.IsInRole("Producer"))
                            {
                                <span style="margin-left: 20px" class="badge rounded-pill bg-primary">Producer</span>
                            }
                            else if (User.IsInRole("Artist"))
                            {
                                <span style="margin-left: 20px" class="badge rounded-pill bg-success">Artist</span>
                            }
                        </div>


                        <hr />

                        @if (User.IsInRole("Admin"))
                        {
                            <p id="usage">@currentUser.Quota.ConvertToDigitalStorageSize() / UNLIMITED</p>

                        }
                        else
                        {
                            <p id="usage">@currentUser.Quota.ConvertToDigitalStorageSize() / @currentUser.FileUploadHardLimit.ConvertToDigitalStorageSize()</p>
                        }

                        @using Microsoft.AspNet.Identity
                        @if (Request.IsAuthenticated)
                        {

                            using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "navbar-right" }))
                            {
                                @Html.AntiForgeryToken()


                                <h5> <a href="@Url.Action("Profile", "UsersManagement", new {id = User.Identity.GetUserId()})">Profil</a></h5>
                                <h5> @Html.ActionLink("Setari", "Index", "Manage", routeValues: null, htmlAttributes: new { title = "Manage" })</h5>



                                <button class="btn btn-outline-info logout-btn"><a href="javascript:document.getElementById('logoutForm').submit()">Log out</a></button>
                            }
                        }
                    </div>
                </div>
            }

        </div>
    </nav>

    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p style="display: block !important">&copy; @DateTime.Now.Year - Trippin </p>
        </footer>
    </div>


    @if (User.Identity.IsAuthenticated)
    {

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
    let subMenu = document.getElementById("subMenu");
    let navbar = document.getElementById("navbar-toggler");
    let notificationContainer = document.getElementById("notification-container");

    function toggleNotification() {
        if (notificationContainer.style.display === "none") {
            notificationContainer.style.display = "block";
            subMenu.classList.remove("open-menu"); 
        } else {
            notificationContainer.style.display = "none";
        }
    }

    function toggleMenu() {
        if (subMenu.classList.contains("open-menu")) {
            subMenu.classList.remove("open-menu");
        } else {
            subMenu.classList.add("open-menu");
            notificationContainer.style.display = "none"; 
        }
    }

    $(document).ready(function () {
        var userId = "@userId";
        $.get("/api/Conturi/" + userId, function (data) {

            $("#email").text(data.email);
            if (data.profilePicture == null) {
                $("#profilepic").attr("src", "/Content/Images/No-profile-picture.jpg");
                $("#profilepicmenu").attr("src", "/Content/Images/No-profile-picture.jpg");
            }
            else {
                $("#profilepic").attr("src", "/Content/Images/User Profiles Images/" + data.profilePicture);
                $("#profilepicmenu").attr("src", "/Content/Images/User Profiles Images/" + data.profilePicture);
            }
        })
        .fail(function () {
            alert("A aparut o eroare");
        });
    });

            function toggleDropdown(dropdownId) {
                var dropdownMenu = document.getElementById(dropdownId);
                dropdownMenu.classList.toggle('show');
            }
        </script>

    }

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>

